const command = '## Commands\nIn this example we\'re gonna be covering, not all of, the `Command` class. \nLet\'s check some code out:\n```cpp\n#include <dpp.h> // "import" discord.cpp\n\nint main() \n{\n  dpp::Client client; // create a client instance\n  \n  // create the command\n  dpp::Command help("help", [](const dpp::Message& message) { \n    message.reply("here\'s some help!");\n  });\n\n  client.add_command(help); // add the command to the client, so it can recognize it\n\n  client.run("BOT_TOKEN_HERE"); // actually initializes the bot, everything after this is unreachable\n  \n  return 0;\n}\n```\nAs you might have noticed:\n- `Command` takes in two arguments, `std::string name` and `std::function<void(const Message& message)> callback` (lambda function)\n- A new method has been added to `Client`: `add_command`. This is, of course, crucial. If you forget to add the command, it will never be triggered.\n\n### Note\nYou can still use `Client::onMessage`, and if you do, it\'ll be executed before any `Command`';
export default command;