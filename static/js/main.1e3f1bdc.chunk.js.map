{"version":3,"sources":["pages/Home/index.jsx","components/Sidebar/index.jsx","components/Header/index.jsx","pages/Docs/index.jsx","pages/Docs/markdown/getting-started.js","pages/Docs/markdown/simple-bot.js","App.js","reportWebVitals.js","index.js"],"names":["Home","className","src","alt","to","Sidebar","selectedMd","selectMd","topics","General","Examples","Classes","Object","keys","map","key","index","id","toLowerCase","topic","onClick","split","join","Header","style","textDecoration","color","target","rel","href","Code","value","language","docco","Docs","useState","setSelectedMd","sections","getting_started","simple_bot","useEffect","document","title","querySelectorAll","forEach","a","newMd","allowDangerousHtml","children","renderers","code","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4NAceA,G,MAVF,kBACT,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAI,6IAA6IC,IAAI,KAC1J,2EACA,cAAC,IAAD,CAAMC,GAAG,QAAQH,UAAU,YAA3B,+B,QCyBOI,G,YA9BC,SAAC,GAA8C,IAAD,IAA3CC,kBAA2C,MAA9B,GAA8B,MAA1BC,gBAA0B,MAAf,aAAe,EACpDC,EAAS,CACXC,QAAS,CAAC,mBACVC,SAAU,CAAC,aAAc,SAAU,YACnCC,QAAS,CAAC,SAAU,UAAW,UAAW,OAAQ,QAAS,SAE/D,OACI,qBAAKV,UAAU,UAAf,SACI,6BACKW,OAAOC,KAAKL,GAAQM,KAAI,SAACC,EAAKC,GAAN,OACrB,qBAAIf,UAAU,aAAyBgB,GAAIF,EAAIG,cAA/C,UACI,6BAAKH,IACJP,EAAOO,GAAKD,KAAI,SAACK,EAAOH,GAAR,OACb,mBAEII,QAAS,WACLb,EAASY,EAAMD,cAAcG,MAAM,KAAKC,KAAK,OAEjDrB,UAAWkB,EAAMD,cAAcG,MAAM,KAAKC,KAAK,OAAShB,EAAa,iBAAmB,GAL5F,SAOKa,GANIH,QAJeA,Y,mCCSrCO,G,OAlBA,kBACX,qBAAKtB,UAAU,SAAf,SACI,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,eAAf,SACI,cAAC,IAAD,CAAMG,GAAG,IAAIoB,MAAO,CAAEC,eAAgB,OAAQC,MAAO,QAArD,SACI,iDAGR,qBAAKzB,UAAU,eAAf,SACI,mBAAG0B,OAAO,SAASC,IAAI,aAAaC,KAAK,4CAAzC,6BCgCVC,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACT,cAAC,IAAD,CAAmBA,SAAUA,EAAUR,MAAOS,IAA9C,SACKF,GAAS,MAIHG,EAzCF,WAAO,IAAD,EACqBC,mBAAS,mBAD9B,mBACR7B,EADQ,KACI8B,EADJ,KAGTC,EAAW,CACbC,gBCdgB,wjHDehBC,WEfU,i6CFyBd,OAPAC,qBAAU,WACNC,SAASC,MAAQ,qBACjBD,SAASE,iBAAiB,KAAKC,SAAQ,SAACC,GACpCA,EAAElB,OAAS,cAEhB,CAACrB,IAGA,gCACI,cAAC,EAAD,IACA,qBAAKL,UAAU,OAAf,SACI,sBAAKA,UAAU,eAAf,UACI,cAAC,EAAD,CACIM,SAAU,SAACuC,GACPV,EAAcU,IAElBxC,WAAYA,IAEhB,qBAAKL,UAAU,YAAf,SACI,cAAC,IAAD,CAAe8C,oBAAoB,EAAMC,SAAUX,EAAS/B,GAAa2C,UAAW,CAAEC,KAAMpB,gBGlBrGqB,EAdH,WACR,OACI,qBAAKlD,UAAU,MAAf,SACI,cAAC,IAAD,UAEI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOmD,KAAK,QAAQC,UAAWnB,IAC/B,cAAC,IAAD,CAAOkB,KAAK,IAAIC,UAAWrD,YCAhCsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASyB,eAAe,SAM1BZ,K","file":"static/js/main.1e3f1bdc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = () => (\r\n    <div className=\"home\">\r\n        <img src=\"https://camo.githubusercontent.com/640b98b021c6efb8c909e62dae5dfc816082e7c2/68747470733a2f2f692e696d6775722e636f6d2f46764b733448722e706e67\" alt=\"\" />\r\n        <h1>A Discord API wrapper for making C++ bots</h1>\r\n        <Link to=\"/docs\" className=\"docs-link\">\r\n            see the docs\r\n        </Link>\r\n    </div>\r\n);\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Sidebar = ({ selectedMd = \"\", selectMd = () => {} }) => {\r\n    const topics = {\r\n        General: [\"Getting started\"],\r\n        Examples: [\"Simple BOT\", \"Embeds\", \"Webhooks\"],\r\n        Classes: [\"Client\", \"Message\", \"Channel\", \"User\", \"Guild\", \"Role\"],\r\n    };\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <ul>\r\n                {Object.keys(topics).map((key, index) => (\r\n                    <li className=\"sidebar-li\" key={index} id={key.toLowerCase()}>\r\n                        <h4>{key}</h4>\r\n                        {topics[key].map((topic, index) => (\r\n                            <p\r\n                                key={index}\r\n                                onClick={() => {\r\n                                    selectMd(topic.toLowerCase().split(\" \").join(\"_\"));\r\n                                }}\r\n                                className={topic.toLowerCase().split(\" \").join(\"_\") === selectedMd ? \"selected-topic\" : \"\"}\r\n                            >\r\n                                {topic}\r\n                            </p>\r\n                        ))}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => (\r\n    <div className=\"header\">\r\n        <div className=\"header-content\">\r\n            <div className=\"header-title\">\r\n                <Link to=\"/\" style={{ textDecoration: \"none\", color: \"#fff\" }}>\r\n                    <h1>discord.cpp</h1>\r\n                </Link>\r\n            </div>\r\n            <div className=\"header-links\">\r\n                <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/luccanunes/discord.cpp\">\r\n                    GitHub\r\n                </a>\r\n                {/* <Link to=\"/docs\">Docs</Link> */}\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Header;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./style.css\";\r\nimport Sidebar from \"../../components/Sidebar/index\";\r\nimport ReactMarkDown from \"react-markdown\";\r\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\r\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\r\nimport Header from \"../../components/Header/index\";\r\nimport gettingStarted from \"./markdown/getting-started\";\r\nimport simpleBot from \"./markdown/simple-bot\";\r\n\r\nconst Docs = () => {\r\n    const [selectedMd, setSelectedMd] = useState(\"getting_started\");\r\n\r\n    const sections = {\r\n        getting_started: gettingStarted,\r\n        simple_bot: simpleBot,\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.title = \"Docs | discord.cpp\";\r\n        document.querySelectorAll(\"a\").forEach((a) => {\r\n            a.target = \"_blank\";\r\n        });\r\n    }, [selectedMd]);\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div className=\"docs\">\r\n                <div className=\"docs-content\">\r\n                    <Sidebar\r\n                        selectMd={(newMd) => {\r\n                            setSelectedMd(newMd);\r\n                        }}\r\n                        selectedMd={selectedMd}\r\n                    />\r\n                    <div className=\"docs-info\">\r\n                        <ReactMarkDown allowDangerousHtml={true} children={sections[selectedMd]} renderers={{ code: Code }} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Code = ({ value, language }) => (\r\n    <SyntaxHighlighter language={language} style={docco}>\r\n        {value || \"\"}\r\n    </SyntaxHighlighter>\r\n);\r\n\r\nexport default Docs;\r\n","const getting_started = '## About\\nInspired by the simplicity of [discord.py](https://github.com/Rapptz/discord.py) and [discord.js](https://github.com/discordjs/discord.js), discord.cpp tries to make the process of interacting with the [Discord API](https://discord.com/developers/docs/intro) easier, so you can worry less about all the socket connections under the hood, and focus on making your bot better.\\n\\n## Example\\n\\n```cpp\\n#include <iostream>\\n#include <dpp.h>\\n\\nint main()\\n{\\n const std::string token = \"BOT_TOKEN_HERE\";\\n dpp::Client client;\\n\\n client.onReady = [&]() {\\n  std::cout << \"hello, c++!\" << std::endl;\\n  std::cout << client.user.id << std::endl << std::endl;\\n };\\n\\n client.onMessage = [&](dpp::Message message) {\\n  if (message.content == \"jaaj?\") {\\n   message.channel().send(\"jooj\"); // or message.reply(\"jooj\"), which mentions the message author\\n  }\\n };\\n \\n client.run(token);\\n \\n return 0;\\n}\\n```\\n\\n## Installation and set up\\nFirst of all, clone the repository to your machine in a directory of your choice (make sure you\"re cloning the `main` branch, not the `development` one).\\n\\nTo create your own project using discord.cpp you have to follow these steps, for this example I\"ll use Visual Studio, but the steps should be the same. Just google the specifics for your IDE of choice.\\n\\n#### Create your solution\\n#### Add a source file and paste the example code\\n#### Add the compiler include path:\\nTo starting using discord.cpp and all its features, you first have to tell your IDE/compiler where you\"re importing it from.\\nHere\\'s how to do it in Visual Studio:\\n1. Right click your *project* name and select properties <br/> <img width=\"350\" src=\"https://user-images.githubusercontent.com/68504851/97646641-f66ba680-1a2e-11eb-809b-b263b8428130.png\">\\n2. Select \"C/C++\" \\n3. Click \"Additional Include Directories\", selected the small arrow on the right and click \"Edit\" <br/> <img width=\"550\" src=\"https://user-images.githubusercontent.com/68504851/97646811-67ab5980-1a2f-11eb-8667-ec9e1b6b135e.png\">\\n4. Click the new folder icon and then the three dots to starting browsing your file explorer. <br/> <img width=\"450\" src=\"https://user-images.githubusercontent.com/68504851/97646868-9cb7ac00-1a2f-11eb-9527-26ea2df19536.png\">\\n5. Select the \"/src\" folder in the directory that you installed discord.cpp\\n6. Click \"Ok\" and \"Apply\".\\n#### Add the linker path:\\nNow that you\"ve added the include path, the compiler is able to find all the classes and functions declarations, but not really their definitions. For that, we need to include an additional depencie to the linker.\\nHere\\'s how to do it in Visual Studio:\\n1. Follow step 1 of \"Add the compiler include path\"\\n2. Select \"Linker\"\\n3. Click \"Additional Library Directories\", selected the small arrow on the right and click \"Edit\" <br/> <img width=\"450\" src=\"https://user-images.githubusercontent.com/68504851/97648131-c32b1680-1a32-11eb-9dfb-ff97f34e4ff4.png\">\\n4. Click the new folder icon and then the three dots to starting browsing your file explorer. <br/> <img width=\"450\" src=\"https://user-images.githubusercontent.com/68504851/97648199-ebb31080-1a32-11eb-9218-9ed4a5e83a98.png\">\\n5. Select the \"/src/Release\" folder in the directory that you installed discord.cpp\\n6. Click \"Ok\" and \"Apply\".\\n7. Now, go to the \"Input\" tab, still in the linker properties\\n8. Select \"Additional Dependencies\", and edit the text string by adding \"discord-cpp.lib;\" to its beginning <br/> <img width=\"450\" src=\"https://user-images.githubusercontent.com/68504851/97648393-62500e00-1a33-11eb-8eba-45eed1fcd837.png\">\\n9. Hit \"Apply\" and \"Ok\" and you should be good to go.';\r\nexport default getting_started\r\n","const simpleBot = '## Simple Bot\\nIn this example we\\'re going to create a very simple bot using discord.cpp, that simply checks for an emoji  inside a message, and, if it exists, reacts to the message with that emoji.\\n\\nLet\\'s check the code out:\\n```cpp\\n#include <iostream>\\n#include <dpp.h> // include discord.cpp\\n\\nint main()\\n{\\n  dpp::Client client; // \\n  \\n  // onReady function is not really necessary, but quite usual\\n  client.onReady = [&client]() {\\n    std::cout << \"hello, dpp\" << std::endl;\\n    std::cout << client.user.id << std::endl;\\n  };\\n  \\n  client.onMessage = [](dpp::Message message){\\n    if (message.author.bot) return; // checks wheter the message is from a bot\\n    \\n    if (message.content.find(\"😎\") != std::string::npos) // checks if \"😎\" is in the message\\n      message.add_reaction(\"😎\"); // reacts to the message with \"😎\"\\n  };\\n  \\n  const std::string token = \"BOT_TOKEN_HERE\"; // you might want to get this from another file\\n  client.run(token); // actually initialzies the bot, everything after this is unreachable\\n  \\n  return 0;\\n}\\n```\\n### Result:\\n<img src=\"https://i.ibb.co/gW976F8/Screenshot-1.png\">\\n\\n### Note\\nIn case you\\'re somewhat new to C++, don\\'t be afraid of that JavaScript-arrow-function-like syntax, those are [lambda functions](https://www.geeksforgeeks.org/lambda-expression-in-c/). Please visit this article if you want to know more about them.';\r\nexport default simpleBot;","import \"./App.css\";\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home/index\";\nimport Docs from \"./pages/Docs/index\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Router>\n\t\t\t\t{/* <Header/> */}\n                <Switch>\n                    <Route path=\"/docs\" component={Docs} />\n                    <Route path=\"/\" component={Home} />\n                </Switch>\n            </Router>\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}