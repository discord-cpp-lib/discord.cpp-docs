{"version":3,"sources":["pages/Home/index.jsx","components/Sidebar/index.jsx","components/Header/index.jsx","pages/Docs/markdown/getting-started.js","pages/Docs/index.jsx","pages/Docs/markdown/simple-bot.js","pages/Docs/markdown/embeds.js","pages/Docs/markdown/webhooks.js","pages/Docs/markdown/commands.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useEffect","document","title","className","src","alt","to","Sidebar","selectedMd","selectMd","topics","General","Examples","Classes","Object","keys","map","key","index","id","toLowerCase","topic","onClick","split","join","Header","style","textDecoration","color","target","rel","href","GettingStarted","querySelectorAll","forEach","link","setAttribute","docco","language","children","width","marginBottom","Code","value","Docs","useState","setSelectedMd","sections","simple_bot","embeds","webhooks","commands","newMd","linkTarget","allowDangerousHtml","renderers","code","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.098e044a.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"./style.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n    useEffect(() => {\r\n        document.title = \"discord.cpp\";\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <img src=\"https://camo.githubusercontent.com/640b98b021c6efb8c909e62dae5dfc816082e7c2/68747470733a2f2f692e696d6775722e636f6d2f46764b733448722e706e67\" alt=\"\" />\r\n            <h1>A Discord API wrapper for making C++ bots</h1>\r\n            <Link to=\"/documentation/content\" className=\"docs-link\">\r\n                see the docs\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Sidebar = ({ selectedMd = \"\", selectMd = () => {} }) => {\r\n    const topics = {\r\n        General: [\"Getting started\"],\r\n        Examples: [\"Simple BOT\", \"Embeds\", \"Commands\", \"Webhooks\"],\r\n        Classes: [\"Client\", \"Message\", \"Channel\", \"User\", \"Embed\", \"Guild\", \"Role\", \"Webhook\"],\r\n    };\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <ul>\r\n                {Object.keys(topics).map((key, index) => (\r\n                    <li className=\"sidebar-li\" key={index} id={key.toLowerCase()}>\r\n                        <h4>{key}</h4>\r\n                        {topics[key].map((topic, index) => (\r\n                            <p\r\n                                key={index}\r\n                                onClick={() => {\r\n                                    selectMd(topic.toLowerCase().split(\" \").join(\"_\"));\r\n                                }}\r\n                                className={topic.toLowerCase().split(\" \").join(\"_\") === selectedMd ? \"selected-topic\" : \"\"}\r\n                            >\r\n                                {topic}\r\n                            </p>\r\n                        ))}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => (\r\n    <div className=\"header\">\r\n        <div className=\"header-content\">\r\n            <div className=\"header-title\">\r\n                <Link to=\"/documentation\" style={{ textDecoration: \"none\", color: \"#fff\" }}>\r\n                    <h1>discord.cpp</h1>\r\n                </Link>\r\n            </div>\r\n            <div className=\"header-links\">\r\n                <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/luccanunes/discord.cpp\">\r\n                    GitHub\r\n                </a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Header;\r\n","import marked from \"marked\";\r\nimport React, { useEffect } from \"react\";\r\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\r\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\r\n\r\nconst GettingStarted = () => {\r\n    useEffect(() => {\r\n        document.querySelectorAll(\"a\").forEach((link) => {\r\n            link.setAttribute(\"target\", \"_blank\");\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2 id=\"about\">About</h2>\r\n            <p>\r\n                Inspired by the simplicity of <a href=\"https://github.com/Rapptz/discord.py\">discord.py</a> and <a href=\"https://github.com/discordjs/discord.js\">discord.js</a>,\r\n                discord.cpp tries to make the process of interacting with the <a href=\"https://discord.com/developers/docs/intro\">Discord API</a> easier, so you can worry less\r\n                about all the socket connections under the hood, and focus on making your bot better.\r\n            </p>\r\n            <h2 id=\"example\">Example</h2>\r\n            <SyntaxHighlighter\r\n                style={docco}\r\n                language={\"cpp\"}\r\n                children={\r\n                    '#include <iostream>\\n#include <dpp.h>\\n\\nint main()\\n{\\n const std::string token = \"BOT_TOKEN_HERE\";\\n dpp::Client client;\\n\\n client.onReady = [&]() {\\n  std::cout << \"hello, c++!\\\\n\";\\n  std::cout << client.user.id << \"\\\\n\\\\n\";\\n };\\n\\n client.onMessage = [&](const dpp::Message& message) {\\n  if (message.content == \"jaaj?\") {\\n   message.channel().send(\"jooj\"); // or message.reply(\"jooj\"), which mentions the message author\\n  }\\n };\\n \\n client.run(token);\\n \\n return 0;\\n}'\r\n                }\r\n            ></SyntaxHighlighter>\r\n            <h2 id=\"installation-and-set-up\">Installation and set up</h2>\r\n            <p>There are two ways of using discord.cpp. You can use the static library version (with the .lib file), or you can use the header only version.</p>\r\n            <details>\r\n                <summary>Static library</summary>\r\n                <p>\r\n                    {\" \"}\r\n                    First of all, clone the repository to your machine in a directory of your choice (make sure you're cloning the <code>main</code> branch).\r\n                </p>\r\n                <p>\r\n                    {\" \"}\r\n                    To create your own project using discord.cpp you have to follow these steps, for this example I'll use Visual Studio, but the steps should be the same. Just\r\n                    google the specifics for your IDE of choice.\r\n                </p>\r\n                <h4 id=\"create-your-solution\">Create your solution</h4>\r\n                <h4 id=\"add-a-source-file-and-paste-the-example-code\">Add a source file and paste the example code</h4>\r\n                <h4 id=\"add-the-compiler-include-path\">Add the compiler include path:</h4>\r\n                <p>\r\n                    {\" \"}\r\n                    To starting using discord.cpp and all its features, you first have to tell your IDE/compiler where you're importing it from. Here's how to do it in Visual\r\n                    Studio:\r\n                </p>\r\n                <ol>\r\n                    <li>\r\n                        <p>\r\n                            Right click your <em>project</em> name and select properties <br />{\" \"}\r\n                            <img width={350} src=\"https://user-images.githubusercontent.com/68504851/97646641-f66ba680-1a2e-11eb-809b-b263b8428130.png\" />\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>Select \"C/C++\" </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Click \"Additional Include Directories\", selected the small arrow on the right and click \"Edit\" <br />{\" \"}\r\n                            <img width={550} src=\"https://user-images.githubusercontent.com/68504851/97646811-67ab5980-1a2f-11eb-8667-ec9e1b6b135e.png\" />\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Click the new folder icon and then the three dots to starting browsing your file explorer. <br />{\" \"}\r\n                            <img width={450} src=\"https://user-images.githubusercontent.com/68504851/97646868-9cb7ac00-1a2f-11eb-9527-26ea2df19536.png\" />\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>Select the \"/src\" folder in the directory that you installed discord.cpp</p>\r\n                    </li>\r\n                    <li>\r\n                        <p>Click \"Ok\" and \"Apply\".</p>\r\n                        <h4 id=\"add-the-linker-path\">Add the linker path:</h4>\r\n                        <p>\r\n                            Now that you've added the include path, the compiler is able to find all the classes and functions declarations, but not really their definitions. For\r\n                            that, we need to include an additional depencie to the linker. Here's how to do it in Visual Studio:\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>Follow step 1 of \"Add the compiler include path\"</p>\r\n                    </li>\r\n                    <li>\r\n                        <p>Select \"Linker\"</p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Click \"Additional Library Directories\", selected the small arrow on the right and click \"Edit\" <br />{\" \"}\r\n                            <img width={450} src=\"https://user-images.githubusercontent.com/68504851/97648131-c32b1680-1a32-11eb-9dfb-ff97f34e4ff4.png\" />\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Click the new folder icon and then the three dots to starting browsing your file explorer. <br />{\" \"}\r\n                            <img width={450} src=\"https://user-images.githubusercontent.com/68504851/97648199-ebb31080-1a32-11eb-9218-9ed4a5e83a98.png\" />\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>Select the \"/src/Release\" folder in the directory that you installed discord.cpp</p>\r\n                    </li>\r\n                    <li>\r\n                        <p>Click \"Ok\" and \"Apply\".</p>\r\n                    </li>\r\n                    <li>\r\n                        <p>Now, go to the \"Input\" tab, still in the linker properties</p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Select \"Additional Dependencies\", and edit the text string by adding \"discord-cpp.lib;\" to its beginning <br />{\" \"}\r\n                            <img width={450} src=\"https://user-images.githubusercontent.com/68504851/97648393-62500e00-1a33-11eb-8eba-45eed1fcd837.png\" />\r\n                        </p>\r\n                    </li>\r\n                    <li style={{ marginBottom: \"15px\" }}>\r\n                        <p>Hit \"Apply\" and \"Ok\" and you should be good to go.</p>\r\n                        <h4 id=\"having-trouble\">Having trouble?</h4>\r\n                        <p>\r\n                            Please report any bugs or issues you might have! You can do so by creating a <a href=\"https://guides.github.com/features/issues/\">issue</a>\r\n                        </p>\r\n                    </li>\r\n                </ol>\r\n            </details>\r\n            <details>\r\n                <summary>Header only</summary>\r\n                <p>\r\n                    {\" \"}\r\n                    First of all, clone the repository to your machine in a directory of your choice (make sure you're cloning the <code>header-only</code> branch).\r\n                </p>\r\n                <p>\r\n                    {\" \"}\r\n                    To create your own project using discord.cpp you have to follow these steps. For this example I'll use Visual Studio, but the steps should be the same. Just\r\n                    google the specifics for your IDE of choice.\r\n                </p>\r\n                <h4 id=\"create-your-solution-1\">Create your solution</h4>\r\n                <h4 id=\"add-a-source-file-and-paste-the-example-code-1\">Add a source file and paste the example code</h4>\r\n                <h4 id=\"add-the-compiler-include-path-1\">Add the compiler include path:</h4>\r\n                <p>\r\n                    {\" \"}\r\n                    To starting using discord.cpp and all its features, you first have to tell your IDE/compiler where you're importing it from. Here's how to do it in Visual\r\n                    Studio:\r\n                </p>\r\n                <ol>\r\n                    <li>\r\n                        <p>\r\n                            Right click your <em>project</em> name and select properties <br />{\" \"}\r\n                            <img width={350} src=\"https://user-images.githubusercontent.com/68504851/97646641-f66ba680-1a2e-11eb-809b-b263b8428130.png\" />\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>Select \"C/C++\" </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Click \"Additional Include Directories\", selected the small arrow on the right and click \"Edit\" <br />{\" \"}\r\n                            <img width={550} src=\"https://user-images.githubusercontent.com/68504851/97646811-67ab5980-1a2f-11eb-8667-ec9e1b6b135e.png\" />\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>\r\n                            Click the new folder icon and then the three dots to starting browsing your file explorer. <br />{\" \"}\r\n                            <img width={450} src=\"https://user-images.githubusercontent.com/68504851/97646868-9cb7ac00-1a2f-11eb-9527-26ea2df19536.png\" />\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        <p>Select the \"/src\" folder in the directory that you installed discord.cpp</p>\r\n                    </li>\r\n                    <li>\r\n                        <p>Click \"Ok\" and \"Apply\", you should be good to go!</p>\r\n                        <h4 id=\"having-trouble-1\">Having trouble?</h4>\r\n                        <p>\r\n                            Please report any bugs or issues you might have! You can do so by creating a <a href=\"https://guides.github.com/features/issues/\">issue</a>\r\n                        </p>\r\n                    </li>\r\n                </ol>\r\n            </details>\r\n        </div>\r\n    );\r\n};\r\nexport default GettingStarted;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./style.css\";\r\nimport Sidebar from \"../../components/Sidebar/index\";\r\nimport ReactMarkDown from \"react-markdown\";\r\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\r\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\r\nimport Header from \"../../components/Header/index\";\r\nimport GettingStarted from \"./markdown/getting-started\";\r\nimport simpleBot from \"./markdown/simple-bot\";\r\nimport embeds from \"./markdown/embeds\";\r\nimport webhooks from \"./markdown/webhooks\";\r\nimport commands from \"./markdown/commands\";\r\n\r\nconst Docs = () => {\r\n    const [selectedMd, setSelectedMd] = useState(\"getting_started\");\r\n\r\n    const sections = {\r\n        simple_bot: simpleBot,\r\n        embeds,\r\n        webhooks,\r\n        commands,\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div className=\"docs\">\r\n                <div className=\"docs-content\">\r\n                    <Sidebar\r\n                        selectMd={(newMd) => {\r\n                            setSelectedMd(newMd);\r\n                        }}\r\n                        selectedMd={selectedMd}\r\n                    />\r\n                    <div className=\"docs-info\">\r\n                        {selectedMd === \"getting_started\" ? (\r\n                            <GettingStarted />\r\n                        ) : (\r\n                            <ReactMarkDown linkTarget=\"_blank\" allowDangerousHtml={true} children={sections[selectedMd]} renderers={{ code: Code }} />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Code = ({ value, language }) => (\r\n    <SyntaxHighlighter language={language} style={docco}>\r\n        {value || \"\"}\r\n    </SyntaxHighlighter>\r\n);\r\n\r\nexport default Docs;\r\n","const simpleBot = '## Simple Bot\\nIn this example we\\'re going to create a very simple bot using discord.cpp, that simply checks for an emoji  inside a message, and, if it exists, reacts to the message with that emoji.\\n\\nLet\\'s check the code out:\\n```cpp\\n#include <iostream>\\n#include <dpp.h> // include discord.cpp\\n\\nint main()\\n{\\n  dpp::Client client; // create a client instance \\n  \\n  // onReady function is not really necessary, but quite usual\\n  client.onReady = [&client]() {\\n    std::cout << \"hello, dpp\" << std::endl;\\n    std::cout << client.user.id << std::endl;\\n  };\\n  \\n  client.onMessage = [](const dpp::Message& message){\\n    if (message.author.bot) return; // checks wheter the message is from a bot\\n    \\n    if (message.content.find(\"😎\") != std::string::npos) // checks if \"😎\" is in the message\\n      message.add_reaction(\"😎\"); // reacts to the message with \"😎\"\\n  };\\n  \\n  const std::string token = \"BOT_TOKEN_HERE\"; // you might want to get this from another file\\n  client.run(token); // actually initializes the bot, everything after this is unreachable\\n  \\n  return 0;\\n}\\n```\\n### Result:\\n<img src=\"https://i.ibb.co/gW976F8/Screenshot-1.png\">\\n\\n### Note\\nIn case you\\'re somewhat new to C++, don\\'t be afraid of that JavaScript-arrow-function-like syntax, those are [lambda functions](https://www.geeksforgeeks.org/lambda-expression-in-c/). Please visit this article if you want to know more about them.';\r\nexport default simpleBot;","const embeds = '## Embeds\\nIn this example we\\'re going to create a very simple bot using [embeds](https://discord.com/developers/docs/resources/channel#embed-limits), that responds to simple commands in order to show all the ways of working with embeds.\\n\\nLet\\'s check the code out:\\n```cpp\\n#include <iostream>\\n#include <dpp.h> // \"import\" discord.cpp\\n\\nint main()\\n{\\n  dpp::Client client; // create a client instance\\n  \\n  // onReady function is not really necessary, but quite usual\\n  client.onReady = [&client]() {\\n    std::cout << \"hello, dpp\" << std::endl;\\n    std::cout << client.user.id << std::endl;\\n  };\\n  \\n  client.onMessage = [](const dpp::Message& message){\\n    if (message.author.bot) return; // checks wheter the message is from a bot\\n    \\n    if (message.content == \"1\") {\\n\tdpp::Embed embed; // instantiate a Embed object\\n\\tembed.setTitle(\"Sending only an embed\"); // set its title\\n\\tembed.setDescription(\"With no plain text content\"); // set its description\\n\\tmessage.channel().send(embed); // send only the embed\\n    } else if (message.content == \"2\") {\\n\tdpp::Embed embed; \\n\\tembed.setTitle(\"Sending an embed\"); \\n\\tembed.setDescription(\"With plain text content as well\");\\n\\tmessage.channel().send(\"Hello!!\", embed); // send the embed with a message*\\n    } else if (message.content == \"3\") {\\n\tdpp::Embed embed;\\n\\tembed.setTitle(\"Sending an embed\");\\n\\tembed.setDescription(\"With *COLOUUUR!!!*\");\\n\\tembed.setColour(\"#21b879\"); // \"#\" is optional, you can also use rgb**\\n\\tmessage.channel().send(embed);\\n    }\\n  };\\n  \\n  const std::string token = \"BOT_TOKEN_HERE\"; // you might want to get this from another file\\n  client.run(token); // actually initializes the bot, everything after this is unreachable\\n  \\n  return 0;\\n}\\n```\\n### Result:\\n<img src=\"https://i.ibb.co/6rMZZbC/image.png\">\\n\\n### Notes\\n \\n \\* It\\'s **crucial** that, if you\\'re sending an embed and normal text, the **text comes first**. Maybe we\\'ll add an overload that enables you to use whatever order you want, but for now this is how you do it.\\n * Check the Embed class section to see how to use rgb.';\r\nexport default embeds;","const webhook =\r\n    '## Webhooks\\nIn this example we\\'re going to create a very simple bot using [webhooks](https://discord.com/developers/docs/resources/webhook).\\n\\nLet\\'s check the code out:\\n```cpp\\n#include <dpp.h> // \"import\" discord.cpp\\n\\nint main()\\n{\\n  // https://discordapp.com/api/webhooks/773192673122135/nl1Owjht3AxrCI2D-eovHdG\\n  //                                     ^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^ \\n  //                                       webhook id         webhook token\\n  dpp::Webhook wh(\"HOOK_ID_HERE\",\"HOOK_TOKEN_HERE\"); \\n  // alternatively: const dpp::Webhook wh(\"FULL_HOOK_URL_HERE\");\\n  wh.setName(\"Julia\");\\n  wh.setAvatarUrl(\"https://pbs.twimg.com/media/EdOUUnLWkAA8ULI.jpg\");\\n\t  \\n  wh.send(\"My name is Julia\"); // * Check the notes\\n  \\n  return 0;\\n}\\n```\\n### Result:\\n<img src=\"https://i.ibb.co/bJZ9QZg/image.png\">\\n\\n### Notes\\n \\n * You can use the send method just like you would use `Channel::send`, but be aware: `Webhook:send` takes in an `std::vector<Embed>` as a parameter, not a single `Embed`.\\n * If you don\\'t set any webhook property, you can declare it as `const`\\n * Check the Webhook class section to get more information on how to use it';\r\nexport default webhook;\r\n","const command = '## Commands\\nIn this example we\\'re gonna be covering, not all of, the `Command` class. \\nLet\\'s check some code out:\\n```cpp\\n#include <dpp.h> // \"import\" discord.cpp\\n\\nint main() \\n{\\n  dpp::Client client; // create a client instance\\n  \\n  // create the command\\n  dpp::Command help(\"help\", [](const dpp::Message& message) { \\n    message.reply(\"here\\'s some help!\");\\n  });\\n\\n  client.add_command(help); // add the command to the client, so it can recognize it\\n\\n  client.run(\"BOT_TOKEN_HERE\"); // actually initializes the bot, everything after this is unreachable\\n  \\n  return 0;\\n}\\n```\\nAs you might have noticed:\\n- `Command` takes in two arguments, `std::string name` and `std::function<void(const Message& message)> callback` (lambda function)\\n- A new method has been added to `Client`: `add_command`. This is, of course, crucial. If you forget to add the command, it will never be triggered.\\n\\n### Note\\nYou can still use `Client::onMessage`, and if you do, it\\'ll be executed before any `Command`';\r\nexport default command;","import \"./App.css\";\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home/index\";\nimport Docs from \"./pages/Docs/index\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Router>\n                <Switch>\n                    <Route path=\"/documentation/content\" component={Docs} />\n                    <Route path=\"/documentation\" component={Home} />\n                </Switch>\n            </Router>\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}